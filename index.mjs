/**
 * The njs request object defined at http://nginx.org/en/docs/njs/reference.html#http
 * This type is not complete, just the elements relevant to operation of this library
 * @typedef {Object} NJSRequest
 * @property {function} getReport - Returns the current tracked memory state
 */

/**
 * The report generated by the profiler.
 * @typedef {Object} Report
 * @property {function} getReport - Returns the current tracked memory state
 */

/**
 * An object representing the profiler. Provides methods
 * to track events, and get the current profile at any point
 * @typedef {Object} Profiler
 * @property {function} getReport - Returns the current tracked memory state
 * @property {function} pushEvent - A function that allows specification of a named event.
 */

/**
 * Initializes the memory profiler. Call this function as
 * early as possible in your handler
 * @param {string} title - The title of the book.
 * @param {string} author - The author of the book.
 */
function init(r, reporterFn) {
  const requestId = r.variables.request_id;
  const initialStats = Object.assign({}, njs.memoryStats);
  const events = [];
  const reporter = reporterFn === null ? null : reporterFn || logReporter;

  const getReport = function getReport() {
    return {
      request_id: requestId,
      cluster_size: initialStats.cluster_size,
      page_size: initialStats.page_size,
      begin: nonStaticMemoryStats(initialStats),
      end: nonStaticMemoryStats(njs.memoryStats),
      growth: diff(initialStats, njs.memoryStats),
      events,
    };
  };

  const pushEvent = function pushEvent(event, meta) {
    events.push({
      event,
      meta,
      rawStats: nonStaticMemoryStats(njs.memoryStats),
    });
  };

  if (reporter) {
    njs.on("exit", () => {
      // No async work in this context
      reporter(getReport(), r);
    });
  }

  return {
    getReport,
    pushEvent,
  };
}

function nonStaticMemoryStats(rawStats) {
  return {
    size: rawStats.size,
    nblocks: rawStats.nblocks,
  };
}

function logReporter(report, r) {
  r.error("======== BEGIN MEMORY REPORT ==========");
  r.error(JSON.stringify(report));
  r.error("========  END MEMORY REPORT  ==========");
}

function fileReporter(report) {
  const fs = require("fs");

  return fs.writeFileSync(`${report.request_id}.json`, JSON.stringify(report));
}

function diff(initial, point) {
  return {
    size_growth: point.size - initial.size,
    nblocks_growth: point.nblocks - initial.nblocks,
  };
}

export default { init, logReporter, fileReporter };
